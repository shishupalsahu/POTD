//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Item{
    int value;
    int weight;
};


// } Driver Code Ends
class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n){
  
          double a[n]; 
      
    for (int i = 0; i < n; i++) {
        a[i] = double(arr[i].value) / double(arr[i].weight);
    }
    multimap<double,pair<int,int>> m; 
    for(int i=0;i<n;i++){
       m.insert({a[i],{arr[i].value,arr[i].weight}}); 
       
    } 
    double ans=0;
    for (auto it = m.rbegin(); it != m.rend(); ++it) {
        double key = it->first;
        int val = it->second.first;
        int weight = it->second.second; 
        if(W-weight>=0){
            ans += val; 
            W -= weight;
        } 
        else{
            ans += key*double(W); 
            break;
        }
    }
    return ans;
  
    }
};


//{ Driver Code Starts.
int main()
{
	int t;
	//taking testcases
	cin>>t;
	cout<<setprecision(6)<<fixed;
	while(t--){
	    //size of array and weight
		int n, W;
		cin>>n>>W;
		
		Item arr[n];
		//value and weight of each item
		for(int i=0;i<n;i++){
			cin>>arr[i].value>>arr[i].weight;
		}
		
		//function call
		Solution ob;
		cout<<ob.fractionalKnapsack(W, arr, n)<<endl;
	}
    return 0;
}
// } Driver Code Ends
