/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 #include<vector>
class Solution {
    private:
    bool pallindrom(vector<int>arr){
     int n=arr.size();
     int s=0,e=n-1;
     while(s<e){
         if(arr[s]!=arr[e]){
             return 0;
         }
         s++;
         e--;
     }
     return 1;
 }
public:
    bool isPalindrome(ListNode* head) {
    //     if(head==NULL || head->next==NULL){
    //     cout<<head;
    //     }
    //     ListNode *curr=head;
    //     ListNode *prev=NULL;
    //     ListNode *next=NULL;
    //     if(curr!=NULL){
    //         next=curr->next;
    //         curr->next=prev;
    //         prev=curr;
    //         curr=next;
    //     }
    //     return prev;
    //    // ListNode *reverseList=new ListNode(prev);
    //      if(prev==head){
    //       return 1;
    //      }
    //    return 0; 
          vector<int>arr;
          ListNode *temp=head;
          while(temp!=NULL){
              arr.push_back(temp->val);
              temp=temp->next;
          }
          return pallindrom(arr);
    }
};
